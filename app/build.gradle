apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def supportAbis = ["armeabi-v7a"]

android {
    //构建版本
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
    //默认的配置
    defaultConfig {
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        applicationId rootProject.ext.android.applicationId
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        externalNativeBuild {
            cmake {
                cppFlags ""
//                arguments "-DANDROID_STL=c++_shared"
//                if (rootProject.ext.useASAN)
//                //CMake 一共有2种编译工具链 - clang 和 gcc
//                    arguments "-DUSEASAN=ON", "-DANDROID_TOOLCHAIN=clang"
            }
        }

        packagingOptions {
            pickFirst '**/libfontconfig.so'
            pickFirst '**/libcrypto.so'
            pickFirst '**/libavcodec.so'
            pickFirst '**/libswscale.so'
            pickFirst '**/libmp3lame.so'

            pickFirst '**/libass.so'
            pickFirst '**/libavfilter.so'
            pickFirst '**/libavformat.so'
            pickFirst '**/libavutil.so'
            pickFirst '**/libexpat.so'

            pickFirst '**/libfdk-aac.so'
            pickFirst '**/libfreetype.so'
            pickFirst '**/libfribidi.so'
            pickFirst '**/libssl.so'
            pickFirst '**/libswresample.so'

            pickFirst '**/libswscale.so'
            pickFirst '**/libx264.so'
            pickFirst '**/libyuv.so'
            pickFirst '**/libyuv-sample.so'
            pickFirst '**/libassimp.so'
            pickFirst '**/libopencv_java3.so'
//            doNotStrip "**.so"
//            def abiFiltersForWrapScript = supportAbis
//            if (rootProject.ext.useASAN && abiFiltersForWrapScript) {
//                def exclude_abis = ["armeabi", "armeabi-v7a", "arm64-v8a", "x86", "x86_64", "mips", "mips64"]
//                        .findAll { !(it in abiFiltersForWrapScript) }
//                        .collect { "**/" + it + "/wrap.sh" }
//                excludes += exclude_abis
//            }
        }

        ndk {
            abiFilters "armeabi-v7a"
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
//    implementation 'com.yiqihudong:image-util:2.5.6'

    implementation 'io.reactivex.rxjava2:rxjava:2.2.7'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'com.github.tbruyelle:rxpermissions:0.10.2'


    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.1"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0"
    implementation 'net.butterflytv.utils:rtmp-client:3.0.1'
//    implementation project(path: ':libyuv-single')
}

